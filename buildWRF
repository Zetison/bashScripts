#!/bin/bash

source ~/kode/bashScripts/sourceWRF
mkdir -p $DIR 
if [[ $1 == 1 ]]
then
	mkdir -p $TEST_DIR
	cd $TEST_DIR 
	wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_tests.tar
	tar -xf Fortran_C_tests.tar
	# Test #1: Fixed Format Fortran Test: TEST_1_fortran_only_fixed.f
	gfortran TEST_1_fortran_only_fixed.f
	./a.out
	
	# Test #2: Free Format Fortran: TEST_2_fortran_only_free.f90
	gfortran TEST_2_fortran_only_free.f90
	./a.out
	
	
	# Test #3: C: TEST_3_c_only.c
	gcc TEST_3_c_only.c
	./a.out
	
	# Test #4: Fortran Calling a C Function (our gcc and gfortran have different defaults, so we force both to always use 64 bit [-m64] when combining them): TEST_4_fortran+c_c.c, and TEST_4_fortran+x_f.f90
	gcc -c -m64 TEST_4_fortran+c_c.c
	gfortran -c -m64 TEST_4_fortran+c_f.f90
	gfortran -m64 TEST_4_fortran+c_f.o TEST_4_fortran+c_c.o
	./a.out
	
	# Test #5:csh
	./TEST_csh.csh
	
	# Test #6:perl
	./TEST_perl.pl
	
	# Test #7:sh
	./TEST_sh.sh
	
	# The following standard UNIX commands are mandatory:
	#ar           head          sed
	#awk          hostname      sleep
	#cat          ln            sort
	#cd           ls            tar
	#cp           make          touch
	#cut          mkdir         tr
	#expr         mv            uname
	#file         nm            wc
	#grep         printf        which
	#gzip         rm            m4
fi

if [[ $2 == 1 ]]
then
	cd $DIR
	wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/mpich-3.0.4.tar.gz
	wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/netcdf-4.1.3.tar.gz
	wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/jasper-1.900.1.tar.gz
	wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/libpng-1.2.50.tar.gz
	wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/zlib-1.2.7.tar.gz
	
	# NetCDF
	tar xzvf netcdf-4.1.3.tar.gz #or just .tar if no .gz present
	cd netcdf-4.1.3
	./configure --prefix=$DIR/netcdf --disable-dap --disable-netcdf-4 --disable-shared
	make
	make install
	cd ..
	
	# MPICH
	tar xzvf mpich-3.0.4.tar.gz #or just .tar if no .gz present
	cd mpich-3.0.4
	./configure --prefix=$DIR/mpich
	make
	make install
	cd ..
	
	# zlib
	tar xzvf zlib-1.2.7.tar.gz     #or just .tar if no .gz present
	cd zlib-1.2.7
	./configure --prefix=$DIR/grib2
	make
	make install
	cd ..
	
#	wget --no-check-certificate https://sourceforge.net/projects/libpng/files/zlib/1.2.9/zlib-1.2.9.tar.gz/download
#	tar -xvf zlib-1.2.9.tar.gz
#	cd zlib-1.2.9
#	sudo -s
#	./configure
#	make 
#	make install
#	cd /lib/x86_64-linux-gnu
#	ln -s -f /usr/local/lib/libz.so.1.2.9/lib libz.so.1
#	cd ~
#	rm -rf zlib-1.2.9

	# libpng
	tar xzvf libpng-1.2.50.tar.gz     #or just .tar if no .gz present
	cd libpng-1.2.50
	./configure --prefix=$DIR/grib2
	make
	make install
	cd ..
	
	# JasPer
	tar xzvf jasper-1.900.1.tar.gz     #or just .tar if no .gz present
	cd jasper-1.900.1
	./configure --prefix=$DIR/grib2
	make
	make install
	cd ..
	
	# Library Compatibility Tests
	cd $TEST_DIR
	wget https://www2.mmm.ucar.edu/wrf/OnLineTutorial/compile_tutorial/tar_files/Fortran_C_NETCDF_MPI_tests.tar
	tar -xf Fortran_C_NETCDF_MPI_tests.tar
	
	# Test #1: Fortran + C + NetCDF
	cp ${NETCDF}/include/netcdf.inc .
	
	gfortran -c 01_fortran+c+netcdf_f.f
	gcc -c 01_fortran+c+netcdf_c.c
	gfortran 01_fortran+c+netcdf_f.o 01_fortran+c+netcdf_c.o -L${NETCDF}/lib -lnetcdff -lnetcdf
	./a.out
	
	# Test #2: Fortran + C + NetCDF + MPI
	cp ${NETCDF}/include/netcdf.inc .
	
	mpif90 -c 02_fortran+c+netcdf+mpi_f.f
	mpicc -c 02_fortran+c+netcdf+mpi_c.c
	mpif90 02_fortran+c+netcdf+mpi_f.o 02_fortran+c+netcdf+mpi_c.o -L${NETCDF}/lib -lnetcdff -lnetcdf
	mpirun ./a.out

	# Install ncl (using conda). Conda may be obtained from http://conda.pydata.org/miniconda.html

	# conda create -n ncl_stable -c conda-forge ncl
	source activate ncl_stable


fi

if [[ $3 == 1 ]]
then
	# Static Geography Data
	mkdir -p $WPSDATADIRECTORY
	cd $WPSDATADIRECTORY
	#wget https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_low_res_mandatory.tar.gz
	#gunzip geog_low_res_mandatory.tar.gz
	#tar -xf geog_low_res_mandatory.tar
	#wget https://www2.mmm.ucar.edu/wrf/src/wps_files/geog_high_res_mandatory.tar.gz
	#gunzip geog_high_res_mandatory.tar.gz
	#tar -xf geog_high_res_mandatory.tar
	# mv geog WPS_GEOG # not needed
	
	# Real-time Data
	cd $WRFDIRECTORY/Build_WRF
	mkdir -p DATA
	#cd DATA
	#$HOME/kode/bashScripts/getNCEPdata "20200701" "00 03 06"
	#cd ..
fi

if [[ $4 == 1 ]]
then
	# BUILD WRF
	cd $WRFDIRECTORY/Build_WRF
	git clone https://github.com/wrf-model/WRF
	cd WRF
	./configure & # use option 34 1
	./compile em_real | tee log.compile
	ls -ls main/*.exe
	cd ..
	
	# BUILD WPS
	git clone https://github.com/wrf-model/WPS
	cd WPS
	./configure & # use option 3
	./compile | tee log.compile
	ls -lh geogrid/src/geogrid.exe
	ls -lh ungrib/src/ungrib.exe
	ls -lh metgrid/src/metgrid.exe
	cd ..
fi

if [[ $5 == 1 ]]
then
	## Run WPS
	cd $WRFDIRECTORY/Build_WRF/WPS
	./geogrid.exe | tee log.geogrid
	ncl util/plotgrids_new.ncl
	ncl util/wrf_wps_ter.ncl
	./link_grib.csh $WRFDIRECTORY/Build_WRF/DATA/GFS*
	ln -sf ungrib/Variable_Tables/Vtable.GFS Vtable
	./ungrib.exe
	./metgrid.exe | tee log.metgrid
	cd ..

	## Run WRF
	cd WRF/run
	ln -sf ../../WPS/met_em* .
	mpirun -np 4 ./real.exe
	ncl ../var/graphics/ncl/wrf_Surface1.ncl
	ncl ../var/graphics/ncl/wrf_Surface2.ncl
	ncl ../var/graphics/ncl/wrf_Surface3.ncl

	mpirun -np 4 ./wrf.exe

fi	
	
if [[ $6 == 1 ]]
then
	cd $HOME/Downloads
	wget https://gist.github.com/wgustafson/0bb2cc307b4a7d3dbaaa2e119c6ca431/archive/5026abcae7b67f64afef13331d58ff373acb6b8b.zip
	unzip 5026abcae7b67f64afef13331d58ff373acb6b8b.zip
	mkdir $HOME/kode/python
	mv 0bb2cc307b4a7d3dbaaa2e119c6ca431-5026abcae7b67f64afef13331d58ff373acb6b8b/WRF2VTK.py $HOME/kode/python
	python -m pip install netCDF4
	python -m pip install vtk
	python -m pip install wrf-python
	
	cd $HOME/kode
	git clone https://github.com/TheBB/SISO
	cd SISO
	pip3 install --user . --trusted-host pypi.python.org --trusted-host files.pythonhosted.org --trusted-host pypi.org

fi
	
if [[ $7 == 1 ]]
then
	cd $HOME/Downloads
	git clone git@github.com:CazYokoyama/wrfv3.git
	cd wrfv3/geog
	cp -r landuse_30s_with_lakes soiltype_top_10m soiltype_bot_10m $WPSDATADIRECTORY/WPS_GEOG
fi


